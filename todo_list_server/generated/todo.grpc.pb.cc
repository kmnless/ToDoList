// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace todo {

static const char* TodoService_method_names[] = {
  "/todo.TodoService/AddItem",
  "/todo.TodoService/UpdateStatus",
  "/todo.TodoService/DeleteItem",
  "/todo.TodoService/GetList",
  "/todo.TodoService/SubscribeChanges",
};

std::unique_ptr< TodoService::Stub> TodoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TodoService::Stub> stub(new TodoService::Stub(channel, options));
  return stub;
}

TodoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddItem_(TodoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStatus_(TodoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteItem_(TodoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetList_(TodoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeChanges_(TodoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TodoService::Stub::AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::todo::AddItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::AddItemRequest, ::todo::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddItem_, context, request, response);
}

void TodoService::Stub::async::AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::AddItemRequest, ::todo::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, std::move(f));
}

void TodoService::Stub::async::AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>* TodoService::Stub::PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::AddItemResponse, ::todo::AddItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>* TodoService::Stub::AsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoService::Stub::UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::todo::UpdateStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStatus_, context, request, response);
}

void TodoService::Stub::async::UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStatus_, context, request, response, std::move(f));
}

void TodoService::Stub::async::UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>* TodoService::Stub::PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::UpdateStatusResponse, ::todo::UpdateStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>* TodoService::Stub::AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoService::Stub::DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::todo::DeleteItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::DeleteItemRequest, ::todo::DeleteItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteItem_, context, request, response);
}

void TodoService::Stub::async::DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::DeleteItemRequest, ::todo::DeleteItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, std::move(f));
}

void TodoService::Stub::async::DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>* TodoService::Stub::PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::DeleteItemResponse, ::todo::DeleteItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>* TodoService::Stub::AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TodoService::Stub::GetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::todo::GetListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::todo::GetListRequest, ::todo::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetList_, context, request, response);
}

void TodoService::Stub::async::GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::todo::GetListRequest, ::todo::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, std::move(f));
}

void TodoService::Stub::async::GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>* TodoService::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::todo::GetListResponse, ::todo::GetListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>* TodoService::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::todo::ChangeNotification>* TodoService::Stub::SubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::todo::ChangeNotification>::Create(channel_.get(), rpcmethod_SubscribeChanges_, context, request);
}

void TodoService::Stub::async::SubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest* request, ::grpc::ClientReadReactor< ::todo::ChangeNotification>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::todo::ChangeNotification>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeChanges_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::todo::ChangeNotification>* TodoService::Stub::AsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::todo::ChangeNotification>::Create(channel_.get(), cq, rpcmethod_SubscribeChanges_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::todo::ChangeNotification>* TodoService::Stub::PrepareAsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::todo::ChangeNotification>::Create(channel_.get(), cq, rpcmethod_SubscribeChanges_, context, request, false, nullptr);
}

TodoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoService::Service, ::todo::AddItemRequest, ::todo::AddItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::AddItemRequest* req,
             ::todo::AddItemResponse* resp) {
               return service->AddItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoService::Service, ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::UpdateStatusRequest* req,
             ::todo::UpdateStatusResponse* resp) {
               return service->UpdateStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoService::Service, ::todo::DeleteItemRequest, ::todo::DeleteItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::DeleteItemRequest* req,
             ::todo::DeleteItemResponse* resp) {
               return service->DeleteItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TodoService::Service, ::todo::GetListRequest, ::todo::GetListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TodoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::GetListRequest* req,
             ::todo::GetListResponse* resp) {
               return service->GetList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TodoService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TodoService::Service, ::todo::SubscribeRequest, ::todo::ChangeNotification>(
          [](TodoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::todo::SubscribeRequest* req,
             ::grpc::ServerWriter<::todo::ChangeNotification>* writer) {
               return service->SubscribeChanges(ctx, req, writer);
             }, this)));
}

TodoService::Service::~Service() {
}

::grpc::Status TodoService::Service::AddItem(::grpc::ServerContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoService::Service::UpdateStatus(::grpc::ServerContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoService::Service::DeleteItem(::grpc::ServerContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoService::Service::GetList(::grpc::ServerContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TodoService::Service::SubscribeChanges(::grpc::ServerContext* context, const ::todo::SubscribeRequest* request, ::grpc::ServerWriter< ::todo::ChangeNotification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace todo

