// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto
#ifndef GRPC_todo_2eproto__INCLUDED
#define GRPC_todo_2eproto__INCLUDED

#include "todo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace todo {

class TodoService final {
 public:
  static constexpr char const* service_full_name() {
    return "todo.TodoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::todo::AddItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>> AsyncAddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::todo::UpdateStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::todo::DeleteItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>> AsyncDeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    virtual ::grpc::Status GetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::todo::GetListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>> AsyncGetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::todo::ChangeNotification>> SubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::todo::ChangeNotification>>(SubscribeChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>> AsyncSubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>>(AsyncSubscribeChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>> PrepareAsyncSubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>>(PrepareAsyncSubscribeChangesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest* request, ::grpc::ClientReadReactor< ::todo::ChangeNotification>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::AddItemResponse>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::UpdateStatusResponse>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::DeleteItemResponse>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>* AsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::todo::GetListResponse>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::todo::ChangeNotification>* SubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>* AsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::todo::ChangeNotification>* PrepareAsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::todo::AddItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>> AsyncAddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::todo::UpdateStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::todo::DeleteItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>> AsyncDeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    ::grpc::Status GetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::todo::GetListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>> AsyncGetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::todo::ChangeNotification>> SubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::todo::ChangeNotification>>(SubscribeChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::ChangeNotification>> AsyncSubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::ChangeNotification>>(AsyncSubscribeChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::ChangeNotification>> PrepareAsyncSubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::todo::ChangeNotification>>(PrepareAsyncSubscribeChangesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, std::function<void(::grpc::Status)>) override;
      void AddItem(::grpc::ClientContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateStatus(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteItem(::grpc::ClientContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetList(::grpc::ClientContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeChanges(::grpc::ClientContext* context, const ::todo::SubscribeRequest* request, ::grpc::ClientReadReactor< ::todo::ChangeNotification>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::AddItemResponse>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::todo::AddItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::UpdateStatusResponse>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::todo::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::DeleteItemResponse>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::todo::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>* AsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::todo::GetListResponse>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::todo::GetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::todo::ChangeNotification>* SubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::todo::ChangeNotification>* AsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::todo::ChangeNotification>* PrepareAsyncSubscribeChangesRaw(::grpc::ClientContext* context, const ::todo::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddItem_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteItem_;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeChanges_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddItem(::grpc::ServerContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response);
    virtual ::grpc::Status UpdateStatus(::grpc::ServerContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response);
    virtual ::grpc::Status DeleteItem(::grpc::ServerContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response);
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response);
    virtual ::grpc::Status SubscribeChanges(::grpc::ServerContext* context, const ::todo::SubscribeRequest* request, ::grpc::ServerWriter< ::todo::ChangeNotification>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddItem() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::todo::AddItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::AddItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::todo::UpdateStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::UpdateStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::todo::DeleteItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::DeleteItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::todo::GetListRequest* request, ::grpc::ServerAsyncResponseWriter< ::todo::GetListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeChanges(::grpc::ServerContext* context, ::todo::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::todo::ChangeNotification>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddItem<WithAsyncMethod_UpdateStatus<WithAsyncMethod_DeleteItem<WithAsyncMethod_GetList<WithAsyncMethod_SubscribeChanges<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::AddItemRequest, ::todo::AddItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::AddItemRequest* request, ::todo::AddItemResponse* response) { return this->AddItem(context, request, response); }));}
    void SetMessageAllocatorFor_AddItem(
        ::grpc::MessageAllocator< ::todo::AddItemRequest, ::todo::AddItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::AddItemRequest, ::todo::AddItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::UpdateStatusRequest* request, ::todo::UpdateStatusResponse* response) { return this->UpdateStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateStatus(
        ::grpc::MessageAllocator< ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteItem() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::DeleteItemRequest, ::todo::DeleteItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::DeleteItemRequest* request, ::todo::DeleteItemResponse* response) { return this->DeleteItem(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteItem(
        ::grpc::MessageAllocator< ::todo::DeleteItemRequest, ::todo::DeleteItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::DeleteItemRequest, ::todo::DeleteItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::todo::GetListRequest, ::todo::GetListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::GetListRequest* request, ::todo::GetListResponse* response) { return this->GetList(context, request, response); }));}
    void SetMessageAllocatorFor_GetList(
        ::grpc::MessageAllocator< ::todo::GetListRequest, ::todo::GetListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::todo::GetListRequest, ::todo::GetListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::todo::SubscribeRequest, ::todo::ChangeNotification>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::todo::SubscribeRequest* request) { return this->SubscribeChanges(context, request); }));
    }
    ~WithCallbackMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::todo::ChangeNotification>* SubscribeChanges(
      ::grpc::CallbackServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddItem<WithCallbackMethod_UpdateStatus<WithCallbackMethod_DeleteItem<WithCallbackMethod_GetList<WithCallbackMethod_SubscribeChanges<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddItem() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddItem() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteItem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeChanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteItem() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeChanges(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeChanges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddItem() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::AddItemRequest, ::todo::AddItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::AddItemRequest, ::todo::AddItemResponse>* streamer) {
                       return this->StreamedAddItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::todo::AddItemRequest* /*request*/, ::todo::AddItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::AddItemRequest,::todo::AddItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::UpdateStatusRequest, ::todo::UpdateStatusResponse>* streamer) {
                       return this->StreamedUpdateStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::todo::UpdateStatusRequest* /*request*/, ::todo::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::UpdateStatusRequest,::todo::UpdateStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::DeleteItemRequest, ::todo::DeleteItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::DeleteItemRequest, ::todo::DeleteItemResponse>* streamer) {
                       return this->StreamedDeleteItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::todo::DeleteItemRequest* /*request*/, ::todo::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::DeleteItemRequest,::todo::DeleteItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::todo::GetListRequest, ::todo::GetListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::todo::GetListRequest, ::todo::GetListResponse>* streamer) {
                       return this->StreamedGetList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::todo::GetListRequest* /*request*/, ::todo::GetListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::todo::GetListRequest,::todo::GetListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_UpdateStatus<WithStreamedUnaryMethod_DeleteItem<WithStreamedUnaryMethod_GetList<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeChanges() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::todo::SubscribeRequest, ::todo::ChangeNotification>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::todo::SubscribeRequest, ::todo::ChangeNotification>* streamer) {
                       return this->StreamedSubscribeChanges(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeChanges(::grpc::ServerContext* /*context*/, const ::todo::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::todo::ChangeNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeChanges(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::todo::SubscribeRequest,::todo::ChangeNotification>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeChanges<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_UpdateStatus<WithStreamedUnaryMethod_DeleteItem<WithStreamedUnaryMethod_GetList<WithSplitStreamingMethod_SubscribeChanges<Service > > > > > StreamedService;
};

}  // namespace todo


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_todo_2eproto__INCLUDED
